// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BeePluginClient is the client API for BeePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeePluginClient interface {
	Fn(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginResponse, error)
}

type beePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewBeePluginClient(cc grpc.ClientConnInterface) BeePluginClient {
	return &beePluginClient{cc}
}

func (c *beePluginClient) Fn(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginResponse, error) {
	out := new(PluginResponse)
	err := c.cc.Invoke(ctx, "/pb.BeePlugin/Fn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeePluginServer is the server API for BeePlugin service.
// All implementations should embed UnimplementedBeePluginServer
// for forward compatibility
type BeePluginServer interface {
	Fn(context.Context, *PluginRequest) (*PluginResponse, error)
}

// UnimplementedBeePluginServer should be embedded to have forward compatible implementations.
type UnimplementedBeePluginServer struct {
}

func (UnimplementedBeePluginServer) Fn(context.Context, *PluginRequest) (*PluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fn not implemented")
}

// UnsafeBeePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeePluginServer will
// result in compilation errors.
type UnsafeBeePluginServer interface {
	mustEmbedUnimplementedBeePluginServer()
}

func RegisterBeePluginServer(s grpc.ServiceRegistrar, srv BeePluginServer) {
	s.RegisterService(&BeePlugin_ServiceDesc, srv)
}

func _BeePlugin_Fn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeePluginServer).Fn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BeePlugin/Fn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeePluginServer).Fn(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeePlugin_ServiceDesc is the grpc.ServiceDesc for BeePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BeePlugin",
	HandlerType: (*BeePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fn",
			Handler:    _BeePlugin_Fn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
